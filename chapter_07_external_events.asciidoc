[[chapter_07_external_events]]
== Event-driven Architecture (using Events To Integrate Microservices)

We've got a microservice with a web api, but what about other ways of talking
to other systems?  how does it know if, say, a shipment is delayed or the
quantity is amended?  how does it communicate to our warehouse system to say
that an order has been allocated and needs to be sent to a customer?

In this chapter we'd like to show how the events metaphor can be extended
to encompass the way that we handle incoming and outgoing messages from the
system.


=== An external event triggers internal invents

We learn about the need to change batch quantities when they're already
in the system.  Perhaps someone made a mistake on the number in the manifest,
or perhaps some sofas fell off a truck. Following a conversation with the
business,footnote:[https://en.wikipedia.org/wiki/Event_storming[Event storming]
is a common technique], we model the situation as in
<<batch_changed_events_flow_diagram>>:


[[batch_changed_events_flow_diagram]]
.batch quantity changed means deallocate and reallocate
image::images/batch_changed_events_flow_diagram.png[]

An event we'll called _batch quantity changed_ should lead us to change the
quantity on the batch, yes, but also to apply a business rule: if the new
quantity drops to less than the total already allocated, we need to
_deallocate_  those orders from that batch.  Then, we want to _reallocate_ them
to other batches.


=== Using A Redis Pubsub Channel For Integration

At MADE.com we use https://eventstore.org/[Eventstore] to convey messages
between systems, but a lightweight solution based on Redis pubsub channels
can work just fine, and are probably more familiar.


Here's how we might start with an end-to-end test.  We can use our existing
API to create batches, and then we'll test both inbound and outbound messages:


[[redis_e2e_test]]
.An end-to-end test for our pubsub model (tests/e2e/test_external_events.py)
====
[source,python]
[role="non-head"]
----
@pytest.mark.usefixtures('postgres_db')
@pytest.mark.usefixtures('restart_api')
@pytest.mark.usefixtures('restart_redis_pubsub')
def test_change_batch_quantity_leading_to_reallocation():
    orderid, sku = random_ref('o'), random_ref('s')
    batch1, batch2 = random_ref('b1'), random_ref('b2')
    post_to_add_batch(batch1, sku, 10, '2011-01-02')
    post_to_add_batch(batch2, sku, 10, '2011-01-03')
    post_to_allocate(orderid, sku, 10, expected_batch=batch1)

    r = redis.Redis(**config.get_redis_host_and_port())
    pubsub = subscribe_to_allocated_events(r)  #<2>

    print('sending change batch quantity for', batch1)
    r.publish('change_batch_quantity', json.dumps({  #<1>
        'batchref': batch1, 'sku': sku, 'qty': 5
    }))

    print('waiting for reallocation event')
    messages = []
    def check_messages():
        messages.append(wait_for(pubsub.get_message))  #<2>
        print(messages)
        data = json.loads(messages[-1]['data'])
        assert data['orderid'] == orderid
        assert data['batchref'] == batch2

    wait_for_assertion(check_messages)
----
====

Because this is an end-to-end test and our publish/subscribe model is
asynchronous, there's a bit of boilerplate to manage waiting, but
essentially:

<1> We'll use a channel called `change_batch_quantity` to send
    in our request to change the quantity for a batch.  In this
    case we deliberately change the quantity such that we expect
    an order to be reallocated to a different batch.

<2> And we'll listen to another channel called `line_allocated` to
    look out for the expected reallocation.


==== Redis Is Another Thin Adapter Around Our Service Layer


[[redis_pubsub_first_cut]]
.A first cut of a redis message listener (src/allocation/redis_pubsub.py)
====
[source,python]
[role="non-head"]
----
from allocation import config, orm, services, unit_of_work

r = redis.Redis(**config.get_redis_host_and_port())


def main():  #<1>
    orm.start_mappers()
    pubsub = r.pubsub(ignore_subscribe_messages=True)
    pubsub.subscribe('change_batch_quantity')

    for m in pubsub.listen():
        handle_change_batch_quantity(m)


def handle_change_batch_quantity(m):  #<2>
    print('handling', m, flush=True)
    data = json.loads(m['data'])
    services.change_batch_quantity(
        ref=data['batchref'], qty=data['qty'],
        uow=unit_of_work.SqlAlchemyUnitOfWork(),
    )
----
====

//TODO: add some calls to logging.debug, where there used to be prints?

<1> Main subscribes us to the channel on load
<2> And our main job is to deserialize JSON, and pass it to the service
    layer, much like the Flask adapter does.


So we'll need a new service called `change_batch_quantity`.


=== Test-driving A New Service At The Service Layer

Following the lessons learned in <<chapter_03_service_layer>>,
we can operate in "high gear," and write our unit tests at the highest
possible level of abstraction, the service layer.  Here's what they might
look like:


[[service_layer_tests_for_change_batch_quantity]]
.Service layer tests for change_batch_quantity (tests/unit/test_services.py)
====
[source,python]
[role="non-head"]
----
    def test_changes_available_quantity():
        uow = FakeUnitOfWork()
        services.add_batch('b1', 'sku1', 100, None, uow)
        [batch] = uow.products.get(sku='sku1').batches
        assert batch.available_quantity == 100
        services.change_batch_quantity('b1', 50, uow)  #<1>
        assert batch.available_quantity == 50  #<1>

    ...

    @staticmethod
    def test_reallocates_if_necessary():
        uow = FakeUnitOfWork()
        services.add_batch('b1', 'sku1', 50, None, uow)
        services.add_batch('b2', 'sku1', 50, date.today(), uow)
        services.allocate('o1', 'sku1', 20, uow)
        services.allocate('o2', 'sku1', 20, uow)
        [batch1, batch2] = uow.products.get(sku='sku1').batches
        assert batch1.available_quantity == 10  #<2>

        services.change_batch_quantity('b1', 25, uow)  #<2>

        # o1 or o2 will be deallocated, so we'll have 25 - 20 * 1
        assert batch1.available_quantity == 5  #<2>
        # and 20 will be reallocated to the next batch
        assert batch2.available_quantity == 30  #<2>
----
====

<1> The simple case would be trivially easy to implement, we just
    modify a quantity.

<2> But if we try and change the quantity so that there's less than
    has been allocated, we'll need to deallocate at least one order,
    and we expect to reallocated it to a new batch


==== An Internal Event To Express De-allocation

A batch might have dozens of orders allocated to it. Similarly to the "out of
stock" email, rather than doing deallocation and re-allocation in-line in the
service function, we can choose to clearly separate responsibility:

* For the system to be in a consistent state, batch quantity changes should
  immediately cause deallocations, if necessary.

* But reallocation can happen in a separate unit of work.

So our flow would be:

* call change batch quantity service
* start uow
* change quantity
* deallocate, emit Deallocated events
* end uow
* enter deallocation handler
* start new uow
* re-allocate
* emit allocated event
* enter allocated event handler
* publish allocated event to redis


==== Implementation

[[change_quantity_service]]
.Service delegates to model layer (src/allocation/services.py)
====
[source,python]
[role="non-head"]
----
def change_batch_quantity(
        ref: str, qty: int,
        uow: unit_of_work.AbstractUnitOfWork
):
    with uow:
        product = uow.products.get_by_batchref(batchref=ref)
        product.change_batch_quantity(ref=ref, qty=qty)
        uow.commit()
----
====

//TODO: move up in file

(along the way we need a new query type on our repository)

[[get_by_batchref]]
.A new query type on our repository (src/allocation/repository.py)
====
[source,python]
----
class AbstractRepository(abc.ABC):
    ...

    def get(self, sku):
        ...

    def get_by_batchref(self, batchref):
        p = self._get_by_batchref(batchref)
        if p:
            self.seen.add(p)
        return p

    @abc.abstractmethod
    def _add(self, product):
        raise NotImplementedError

    @abc.abstractmethod
    def _get(self, sku):
        raise NotImplementedError

    @abc.abstractmethod
    def _get_by_batchref(self, batchref):
        raise NotImplementedError




class SqlAlchemyRepository(AbstractRepository):
    ...

    def _get(self, sku):
        return self.session.query(model.Product).filter_by(sku=sku).first()

    def _get_by_batchref(self, batchref):
        return self.session.query(model.Product).join(model.Batch).filter(
            orm.batches.c.reference == batchref,
        ).first()

----
====

And on our fakerepository too:

[[fakerepo_get_by_batchref]]
.Updating the fake repo too (tests/unit/test_services.py)
====
[source,python]
[role="non-head"]
----
class FakeRepository(repository.AbstractRepository):
    ...

    def _get(self, sku):
        return next((p for p in self._products if p.sku == sku), None)

    def _get_by_batchref(self, batchref):
        return next((
            p for p in self._products for b in p.batches
            if b.reference == batchref
        ), None)
----
====

You may be starting to worry that maintaining these fakes is going to be
a maintenance burden.  There's no doubt that it is work, but in our experience
it's not a lot of work.  Once your project is up and running, the interface
for your repository and UoW abstractions really don't change much.  And if
you're using ABC's, they'll help remind you when things get out of sync.


TODO: discuss finder methods on repository.


We add the new method to the model, which does the quantity change
and deallocation(s) inline, and publishes a new event.  We also
modify the existing allocate function to publish an event.


[[change_batch_model_layer]]
.Our model evolves to capture the new requirement (src/allocation/model.py)
====
[source,python]
----
class Product:
    #...
    def allocate(self, line: OrderLine) -> str:
        try:
            ...
            batch.allocate(line)
            self.events.append(events.Allocated(
                line.orderid, line.sku, line.qty, batch.reference
            ))
    ...

    def change_batch_quantity(self, ref: str, qty: int):
        batch = next(b for b in self.batches if b.reference == ref)
        batch._purchased_quantity = qty
        while batch.available_quantity < 0:
            line = batch.deallocate_one()
            self.events.append(
                events.Deallocated(line.orderid, line.sku, line.qty)
            )
#...

class Batch:
    #...

    def deallocate_one(self) -> OrderLine:
        return self._allocations.pop()
----
====


TODO: should we have `Batch.change_purchased_quantity`?  But how to
    pass events back up to Product object?

//TODO: access to underscore variable
//TODO: we changed from Batch.deallocate to Batch.deallocate_one,
// needed to delete/amend some unit tests. ok to gloss over?


=== New Handlers For Allocated And Deallocated Events

Here's what the events will look like:

[[two_new_events]]
.Allocated and Deallocated events (src/allocation/events.py)
====
[source,python]
----
@dataclass
class Allocated(Event):
    orderid: str
    sku: str
    qty: int
    batchref: str

@dataclass
class Deallocated(Event):
    orderid: str
    sku: str
    qty: int
----
====


The handlers themselves aren't very complicated:


[[change_batch_new_handlers]]
.New handlers for allocate and reallocate (src/allocation/messagebus.py)
====
[source,python]
[role="non-head"]
----
def reallocate(
        event: events.Deallocated, uow: unit_of_work.AbstractUnitOfWork
):
    services.allocate(event.orderid, event.sku, event.qty, uow=uow)  #<1>


def publish_allocated_event(
        event: events.Allocated, uow: unit_of_work.AbstractUnitOfWork,
):
    redis_pubsub.publish('line_allocated', event)  #<2>


HANDLERS = {
    events.OutOfStock: [send_out_of_stock_notification],
    events.Allocated: [publish_allocated_event],
    events.Deallocated: [reallocate],

}  # type: Dict[Type[events.Event], List[Callable]]
----
====

<1> reallocate just calls our existing service-layer `allocate` function
<2> and publishing an external event is very easy too:

//TODO, type hinting hints, use from __future__ import annotations


[[redis_publish]]
.Publishing an event as JSON (src/allocation/redis_pubsub.py)
====
[source,python]
----
def publish(channel, event):
    print('publishing', channel, event, flush=True)
    r.publish(channel, json.dumps(asdict(event)))
----
====


==== But Handlers Do Now Need A Uow

Our event handlers do now need a UoW.  We make a small modification
to the main `messagebus.handle()` function:

[[handle_takes_uow]]
.Handle takes a UoW (src/allocation/messagebus.py)
====
[source,python]
[role="non-head"]
----
def handle(events_: List[events.Event], uow: unit_of_work.AbstractUnitOfWork):
    while events_:
        event = events_.pop(0)
        for handler in HANDLERS[type(event)]:
            handler(event, uow=uow)
----
====



And to _unit_of_work.py_:


[[uow_passes_self_to_messagebus]]
.UoW passes self to message bus (src/allocation/unit_of_work.py)
====
[source,python]
----
class AbstractUnitOfWork(abc.ABC):
    ...

    def commit(self):
        self._commit()
        for obj in self.products.seen:
            messagebus.handle(obj.events, uow=self)  #<1>
----
====

<1> The UoW passes itself to the messagebus.


And that will get us to passing tests.  Things are starting to feel a little
messy, however.



=== Services Can Become Event Handlers

Let's take a look at our services and message handlers side-by-side:


[[halfway_point]]
.Services recap (src/allocation/services.py)
====
[source,python]
[role="non-head"]
----
def add_batch(
        ref: str, sku: str, qty: int, eta: Optional[date],
        uow: unit_of_work.AbstractUnitOfWork
):
...
def allocate(
        orderid: str, sku: str, qty: int,
        uow: unit_of_work.AbstractUnitOfWork
) -> str:
...
def change_batch_quantity(
        ref: str, qty: int,
        uow: unit_of_work.AbstractUnitOfWork
):
----
====


[[handlers_recap]]
.Handlers recap (src/allocation/messagebus.py)
====
[source,python]
[role="non-head"]
----
def send_out_of_stock_notification(
        event: events.OutOfStock, uow: unit_of_work.AbstractUnitOfWork
):
...
def reallocate(
        event: events.Deallocated, uow: unit_of_work.AbstractUnitOfWork
):
    services.allocate(event.orderid, event.sku, event.qty, uow=uow)
...
def publish_allocated_event(
        event: events.Allocated, uow: unit_of_work.AbstractUnitOfWork,
):
----
====


There are a few code smells hanging around:

* primitive obsession:  we switched to using primitives in our service
  layer because they freed us from depending on the domain model, but
  our adapters, flask and redis, are spending a lot of time wrangling
  strings and integer arguments.  Perhaps we could capture the structure
  of the data required to call a service using some sort of reusable class?

* services and event handlers are quite similar.   They have dependencies
  on the UoW and other external adapters, and they even sometimes call each
  other.  More fundamentally, they're both ways of reacting to some sort of
  command or event, whether it's internal or external.


Let's see what would happen if we pushed the event-driven metaphor a little
further, and made all the services into event handlers too.  Event classes
will solve the "primitive obsession" problems, and the message bus will become
the core of our application:



[[full_messagebus]]
.The messagebus grows (src/allocation/messagebus.py)
====
[source,python]
----
HANDLERS = {
    events.BatchCreated: [handlers.add_batch],
    events.BatchQuantityChanged: [handlers.change_batch_quantity],
    events.AllocationRequest: [handlers.allocate],
    events.Deallocated: [handlers.allocate],
    events.OutOfStock: [handlers.send_out_of_stock_notification],
    events.Allocated: [handlers.publish_allocated_event],

}  # type: Dict[Type[events.Event], List[Callable]]
----
====


We define a series of new events, which capture the inputs, outputs, and
internal message structures of our system in a single place:


[[new_events]]
.More events (src/allocation/events.py)
====
[source,python]
----
@dataclass
class AllocationRequest(Event):
    orderid: str
    sku: str
    qty: int

#...

@dataclass
class BatchCreated(Event):
    ref: str
    sku: str
    qty: int
    eta: Optional[date] = None

@dataclass
class BatchQuantityChanged(Event):
    ref: str
    qty: int
----
====


And we combine our services and handlers into a single file,
_handlers.py_:


[[handlers_dot_py]]
.Handlers and services are the same thing, really (src/allocation/handlers.py)
====
[source,python]
----
def add_batch(
        event: events.BatchCreated, uow: unit_of_work.AbstractUnitOfWork
):
...
def change_batch_quantity(
        event: events.BatchQuantityChanged, uow: unit_of_work.AbstractUnitOfWork
):
...
def allocate(
        event: events.AllocationRequest, uow: unit_of_work.AbstractUnitOfWork
) -> str:
...
def send_out_of_stock_notification(
        event: events.OutOfStock, uow: unit_of_work.AbstractUnitOfWork,
):
...
def publish_allocated_event(
        event: events.Allocated, uow: unit_of_work.AbstractUnitOfWork,
):
----
====


Now the places in our code where we need to parse external input have a clearly
defined data structure for making requests into the system, the events, and a
single entrypoint into the system, the message bus:

////
TODO:
By the time we hit Example 17. Flask creates events and puts them on the messagebus. (src/allocation/flask_app.py), it would be nice to have a formal definition of the messagebus.handle function.
My guess is that it's just a simple loop mapping an event type to a handler using the HANDLERS dictionary, but explicitly stating that would be helpful.

https://github.com/python-leap/book/issues/37
////

[[flask_with_events]]
.Flask creates events and puts them on the messagebus. (src/allocation/flask_app.py)
====
[source,python]
----
@app.route("/add_batch", methods=['POST'])
def add_batch():
    eta = request.json['eta']
    if eta is not None:
        eta = datetime.fromisoformat(eta).date()
    event = events.BatchCreated(
        request.json['ref'], request.json['sku'], request.json['qty'], eta,
    )
    messagebus.handle([event], unit_of_work.SqlAlchemyUnitOfWork())
    return 'OK', 201

...

@app.route("/allocate", methods=['POST'])
def allocate_endpoint():
    try:
        event = events.AllocationRequest(
            request.json['orderid'], request.json['sku'], request.json['qty'],
        )
        ...
----
====


Redis now looks very similar

[[redis_with_events]]
.And so does redis (src/allocation/redis_pubsub.py)
====
[source,python]
----
def handle_change_batch_quantity(m):
    print('handling', m, flush=True)
    data = json.loads(m['data'])
    event = events.BatchQuantityChanged(ref=data['batchref'], qty=data['qty'])
    messagebus.handle([event], uow=unit_of_work.SqlAlchemyUnitOfWork())
----
====


And our system is now entirely event-driven.

TODO add a bit on validating input (and outputs) by using event schemas.
    Maybe a whole chapter on validation, including that bit about validating
    at the edges and not programming defensively in your inner layers.


.Internal vs External events
*******************************************************************************
It's a good idea to keep the distinction between internal and external events
clear.  Some events may come from the outside, and some events may get upgraded
and published externally, but not all of them.  This is particularly important
if you get into event sourcing (TODO: link)

*******************************************************************************


TODO: talk about the fact that we've implemented quite a complicated use case
    (change quantity, deallocate, start new transaction, reallocate,
    publish external notification), but thanks to our architecture the
    _complexity_ stays constant.  we just have events, handlers, and a unit
    of work.  it's easy to reason about, and easy to explain.  Possibly
    show a hacky version for comparison?


=== What Have We Achieved?

* events are simple dataclasses that define the data structures for inputs,
  outputs, and internal messages within our system.  this is quite powerful
  from a DDD standpoint, since events often translate really well into
  business language; cf. "event storming" (TODO: link)

* handlers are the way we react to events.   They can call down to our
  model, or they can call out to external services.  We can define multiple
  handlers for a single event if we want to.  handlers can also raise other
  events.  This allows us to be very granular about what a handler does,
  and really stick to the SRP.

* events can come _from_ the outside, but they can also be published
  externally -- our `publish` handler converts an event to a message
  on a redis channel. We use events to talk to the outside world.

We've added bit of complexity to our architecture, but hopefully you can
see how we've now made it very easy to plug in almost any new requirement
from the business, whether it's a new use case, a new integration with
one of our internal systems, or an integration with external systems.
